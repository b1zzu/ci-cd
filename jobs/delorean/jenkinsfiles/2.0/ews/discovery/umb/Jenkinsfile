#!groovy

@Library('delorean-pipeline-library') _

import org.integr8ly.GitHubUtils
import org.kohsuke.github.GitHub
import org.kohsuke.github.GHPullRequest
import org.kohsuke.github.GitHubBuilder

def ghUtils = new GitHubUtils()

def createJiraQuery(labels) {
    String query = "project = INTLY AND status = Open"

    for (i = 0; i < labels.size(); i++) {
        def label = labels[i].replaceAll('"', "'")
        query = "${query} AND labels=${label}"
    }

    return query
}

String[] jiraLabelsFor(String productName, String tag, def labels = []) {
    def defaultLabels = [
            /"delorean-ews-2"/,
            /"${productName}"/
    ]
    if ('master' != tag) {
        labels << /"${tag}"/
    }
    return labels + defaultLabels
}

def createJiraBody(summary, description, gitPrUrl, labels) {
    return """{
      "fields": {
          "project": {
              "id": "12321620",
              "key": "INTLY",
              "name": "Integreatly"
          },
          "summary": "${summary}",
          "description": "${description}",
          "labels": ${labels},
          "issuetype": {
              "name": "Task"
          },
          "priority": {
              "id": "3",
              "name": "Major"
          },
          "customfield_12310220": "${gitPrUrl}"
      }
  }"""
}

String createMailBody(msgInfoName, msgInfoImage, passed, prUrl, jiraIssue) {
    def body = ""
    body += [
            "Hi folks,",
            "-",
            "We wanted to let you know that we got word of a new build of the `${msgInfoName}` image",
            "There's some details below about it",
            "-",
            "The build that triggered this message: ${msgInfoImage}",
            "The jenkins pipeline which produced this email: ${env.BUILD_URL}",
    ].join('\n')
    if (passed) {
        if (prUrl) {
            body = [
                    body,
                    "",
                    "The resulting pr can be found here: ${prUrl}"
            ].join('\n')
        }
        if (jiraIssue) {
            body = [
                    body,
                    "",
                    "The resulting JIRA issue can be found here: ${jiraIssue}"
            ].join('\n')
        }
    } else {
        body = [
                body,
                "",
                "Unfortunately the build DID NOT pass!!",
                "Please check at the pipeline link above for logs."
        ].join('\n')
    }
    body = [
            body,
            "Feel free to reach out to the delorean team about it. :)"
    ].join('\n')
    return body
}

String mailSubject(productName) {
    return "New build of ${productName} created in Brew"
}

String jiraUrl
String prUrl
def productBranch = params.isGA ? "${productName}-next-ga" : "${productName}-next"

pipeline {
    agent any
    environment {
        PATH = "$WORKSPACE/delorean/scripts/delorean/:$PATH"
        MANIFESTS_DIR = "$WORKSPACE/integreatly-operator/manifests"
        githubUserPassCredentialsID = 'githubjenkins'
        jiraCredentials = 'integreatly-jira-bot'
        jiraHost = "https://issues.redhat.com"
        jiraRestApiUrl = "https://issues.redhat.com/rest/api/2"
        deloreanBranch = "master"
    }
    stages {
        stage('Process UMB Message') {
            steps {
                script {
                    sh "echo \"Process UMB Message\""
                    final Map msg = readJSON text: CI_MESSAGE
                    image = msg.info.extra.image.index.pull[1]
                    tag = msg.info.extra.image.index.tags[0]
                    source = msg.info.source
                    sh "echo Image to process: ${image}"
                }
            }
        }

        stage('Checkout') {
            steps {
                cleanWs()
                dir('integreatly-operator') {
                    git branch: sourceBranch, url: 'https://github.com/integr8ly/integreatly-operator'
                }
                dir('delorean') {
                    git branch: deloreanBranch, url: 'https://github.com/integr8ly/delorean'
                }
            }
        }

        stage("Ensure Product Branch") {
            steps {
                dir('integreatly-operator') {
                    withCredentials([usernamePassword(credentialsId: 'githubjenkins', passwordVariable: 'gitPassword', usernameVariable: 'gitUsername')]) {
                        sh("""
                        git config --global user.name 'Automatron'
                        git config --global user.email 'github.eng@feedhenry.com'
                        git config --global credential.username ${gitUsername}
                        git config --global credential.helper "!echo password=${gitPassword}; echo"
                       """)
                    }
                    script {
                        def checkout = sh(script: "git checkout ${productBranch}", returnStatus: true)
                        if (checkout) {
                            sh("""
                            git checkout -B ${productBranch}
                           """)
                        }
                        sh "git rebase ${sourceBranch}"
                    }
                }
            }
        }

        stage('Extract Manifests') {
            steps {
                dir('integreatly-operator') {
                    script {
                        sh "process-image-manifests ${image} ${productName}"
                        sh "git add ."
                    }
                }
            }
        }

        stage('Process Manifest Images') {
            when {
                expression {
                    return !params.isGA
                }
            }
            steps {
                dir('integreatly-operator') {
                    echo "Process Manifest Images - generate image_mirror_mapping files and update CSV with new images tags"
                    sh "process-csv-images ${productName}"
                    sh "git add ."
                }
            }
        }

        stage('Mirror Images') {
            steps {
                script {
                    if (params.dryRun) {
                        println "[DRYRUN] If there are image mappings in any image_mirror_mapping files inside the manifest directory they would be mapped"
                    } else {
                        withCredentials([usernamePassword(credentialsId: "quay-integreatly_delorean", usernameVariable: "USERNAME", passwordVariable: "PASSWORD")]) {
                            sh "docker login -u=\"${USERNAME}\" -p=\"${PASSWORD}\" quay.io"
                            sh "mirror-images.sh"
                        }
                    }
                }
            }
        }

        stage('Push Branch') {
            steps {
                dir('integreatly-operator') {
                    script {
                        String productVersion = sh(script: ". csv_helper && get_current_version ${productName}", returnStdout: true ).trim()
                        gitCommitWhenChanges("Update ${productName} manifests (${productVersion})") { msgs ->
                            msgs << "Image: ${image}"
                            msgs << "Image tag: ${tag}"
                            msgs << "Image source: ${source}"
                        }
                        int commmitCount = sh(returnStdout: true, script: "git log origin/${sourceBranch}..${productBranch} --pretty=o | wc -l").trim() as int
                        def existingBranchCommitHash = sh(returnStdout: true, script: "git ls-remote origin refs/heads/${productBranch} | cut -f 1").trim()

                        boolean doPush = false

                        if (productName != 'master') {
                            if (productBranch != 'master') {
                                if (existingBranchCommitHash) {
                                    doPush = true
                                } else {
                                    doPush = commmitCount > 0
                                }
                            }
                        }
                        echo "doPush = ${doPush}"
                        if (doPush) {
                            gitPushBranch(productBranch, true)
                        } else {
                            echo "[INFO] Branch push criteria not met for ${productBranch}"
                        }
                    }
                }
            }
        }

        stage('Create Pull Request') {
            steps {
                script {
                    if (params.createPR) {
                        String title = "[WIP] ${productName} update"
                        String body = "Created automatically by jenkins"
                        String[] defaultPRLabels = ["do-not-merge/work-in-progress"]
                        if (params.dryRun) {
                            println "Finds an open pull request with the base branch '${sourceBranch}'. If this does not exist, it creates a new pull request with the following details:\ntitle:'${title}',\nbody '${body}',\nlabels:${defaultPRLabels}"
                            prUrl = "https://github.com/example-pr-url"
                        } else {
                            println("Creating PR for ${productName}")
                            withCredentials([usernamePassword(
                                    credentialsId: githubUserPassCredentialsID,
                                    passwordVariable: 'GITHUB_PASSWORD',
                                    usernameVariable: 'GITHUB_USERNAME')]) {
                                final GitHub gitHub = new GitHubBuilder()
                                        .withOAuthToken(env.GITHUB_PASSWORD, env.GITHUB_USERNAME)
                                        .build()
                                GHPullRequest pr = ghUtils.ghFindOrCreatePullRequest(gitHub.getRepository("integr8ly/integreatly-operator"), "integr8ly:${productBranch}", "${sourceBranch}", title, body, defaultPRLabels)
                                prUrl = pr.getHtmlUrl()
                            }
                        }
                        println "[INFO] GitHub PR: ${prUrl}"
                    } else {
                        println "[INFO] Pull Request creation is disabled for now."
                    }
                }
            }
        }

        stage('Create Jira') {
            steps {
                script {
                    if (params.createJIRA) {
                        if (params.dryRun) {
                            println "[DRYRUN] A JIRA ticket would be created"
                            jiraUrl = "${jiraHost}/browse/example-jira-url"
                        } else {
                            String[] labels = jiraLabelsFor("${productName}", "${tag}", [/"product-update"/])
                            String summary = "Update of ${productName} available"
                            String description = "Update of ${productName} is availabe to go back to branch ${sourceBranch}"
                            String query = createJiraQuery(labels)
                            def body = createJiraBody(summary, description, "${prUrl}", labels)
                            jiraID = jiraCreateIssue("${jiraCredentials}", "${jiraRestApiUrl}", query, body)
                            jiraUrl = "${jiraHost}/browse/${jiraID}"
                        }
                        println "[INFO] JIRA issue: ${jiraUrl}"
                    } else {
                        println "[INFO] JIRA issue creation is disabled for now."
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                boolean passed = currentBuild.currentResult == 'SUCCESS'
                Map msg = readJSON text: CI_MESSAGE
                String body = createMailBody("${msg.info.name}", "${image}", passed, prUrl, jiraUrl)
                String subject = mailSubject("${productName}")
                if (params.dryRun) {
                    println "[DRYRUN] Would send a mail to '${mailTo}' with subject '${subject}' and body:"
                    print body
                } else {
                    mail(
                            subject: subject,
                            to: mailTo,
                            body: body
                    )
                }
            }
        }
    }
}
