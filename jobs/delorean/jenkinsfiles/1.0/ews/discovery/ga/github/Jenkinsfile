#!groovy
@Library('delorean-pipeline-library') _

import org.integr8ly.GitHubUtils

String installationGitUrl = params.installationGitUrl ?: 'git@github.com:integr8ly/installation.git'
String installationGitRef = params.installationGitRef ?: 'master'
def githubCredentialsID = params.credentialId ?: 'githubjenkins'
def githubSSHCredentialsID = params.sshCredentialId ?: 'fh-automatron-github-sshkey'
def projectOrg = params.projectOrg
def projectRepo = params.projectRepo
def productName = params.productName
def releaseFetchMethod = params.releaseFetchMethod
def gaBranch = params.installationProductBranch ?: "${productName}-ga"
def gaReleaseTagRef = params.gaReleaseTagRef ?: ''
boolean updateLatestRHMIRelease = params.updateLatestRHMIRelease ?: false

def latestRHMIRelease
String latestRHMIBranch
def latestReleaseGABranch

currentBuild.displayName = "${currentBuild.displayName} ${productName}"

static String getRHMIReleaseBranch(releaseTag) {
    def versionParts = (releaseTag =~ /^release-([0-9]+).([0-9]+).([0-9]+)-?(.*)?$/)[0]
    def majorVersion = versionParts[1]
    def minorVersion = versionParts[2]
    return "v${majorVersion}.${minorVersion}"
}

// ansible role name is the name of an integr8ly/installation/roles/ package
// so the output should be the same as a package name there
String lookupProductAnsibleRole(String product) {
    String role
    switch (product) {
        case "amq-online":
            role = "enmasse"
            break
        case "backup-container":
            role = "backup"
            break
        case "datasync-template":
            role = "datasync"
            break
        case "fuse-online":
            role = "fuse_managed"
            break
        default:
            role = product
    }
    return role
}

String[] extractSemVer(String productVersion, String productName) {
    if (productName == "fuse") {
        List parts = productVersion.replaceAll("[^0-9/-]", "").tokenize("-")
        return [parts[1].substring(0, 1), parts[1].substring(1, 2), parts[1].substring(2, 6), parts[2]]
    } else {
        return productVersion.replaceAll("[^0-9/.]", "").tokenize(".")
    }
}

boolean verifyIsGA(String product, String version) {
      return true
}

String findLatestVersionFor(String product, String currentVersion, List allVersions, String type, List levels) {

    String[] currentSemVer = extractSemVer(currentVersion, product)
    String majorVersion = currentSemVer[0]
    String minorVersion = currentSemVer[1]
    String versionPattern
    if (levels.contains('major')) {
        versionPattern = product == "fuse" ? "application-templates-\\d+.\\d+.fuse-\\d+-redhat-\\d+" : "(v)?\\d+.\\d+.\\d+(.GA)?"
    } else {
        if (levels.contains('minor')) {
            versionPattern = product == "fuse" ? "application-templates-\\d+.\\d+.fuse-${majorVersion}\\d+-redhat-\\d+" : "(v)?${majorVersion}.\\d+.\\d+(.GA)?"
        } else {
            if (levels.contains('patch')) {
                versionPattern = product == "fuse" ? "application-templates-\\d+.\\d+.fuse-${majorVersion}${minorVersion}\\d+-redhat-\\d+" : "(v)?${majorVersion}.${minorVersion}.\\d+(.GA)?"
            }
        }
    }

    //Extact only version that match the expected pattern for this product
    def matchingVersions = allVersions.findAll {
        it ==~ ~/${versionPattern}/
    }

    //Sort the versions and reverse so the most current is first in the list
    matchingVersions.sort { a, b ->
        a = a.replace("v", "");
        b = b.replace("v", "");
        List verA = extractSemVer(a, product)
        List verB = extractSemVer(b, product)
        def commonIndices = Math.min(verA.size(), verB.size())
        for (int i = 0; i < commonIndices; ++i) {
            def numA = verA[i].toInteger()
            def numB = verB[i].toInteger()
            if (numA != numB) {
                return numA <=> numB
            }
        }
        verA.size() <=> verB.size()
    }
    matchingVersions = matchingVersions.reverse()

    //Traverse the list, the first one matching the type we care about wins
    String latestVersion = null
    matchingVersions.find { version ->
        if (type == 'all') {
            latestVersion = version
            return true
        } else {
            boolean isGA = verifyIsGA(product, version)
            if (type == 'ga' && isGA) {
                latestVersion = version
                return true
            }
            if (type == 'rc' && !isGA) {
                latestVersion = version
                return true
            }
        }
    }

    println "[INFO] Found ${matchingVersions.size()} versions of ${product} for ${levels}, ${latestVersion} is the best match for type ${type} -- ${matchingVersions}"

    return latestVersion ?: currentVersion
}

def gitDeleteCommitWithMessage(commitMsg, baseBranch) {
    def commit = sh(returnStdout: true, script: "git log origin/${baseBranch}..HEAD --grep '${commitMsg}' --pretty=format:\"%H\"").trim()
    if (commit) {
        print "Deleting commit ${commit}"
        sh "git rebase --onto ${commit}^ ${commit}"
    } else {
        print "No commit found for message ${commitMsg} since origin/${baseBranch}!"
    }
}

def processInstallationBranch(body) {
    def config = [:]
    body.resolveStrategy = Closure.DELEGATE_FIRST
    body.delegate = config
    body()

    String projectOrg = config.projectOrg ?: params.projectOrg
    String projectRepo = config.projectRepo ?: params.projectRepo

    String installationGitUrl = config.installationGitUrl ?: params.installationGitUrl ?: 'git@github.com:integr8ly/installation.git'
    String githubSSHCredentialsID = config.githubSSHCredentialsID ?: params.githubSSHCredentialsID ?: 'fh-automatron-github-sshkey'
    String installationManifestFile = config.installationManifestFile ?: params.installationManifestFile ?: './inventories/group_vars/all/manifest.yaml'
    String installationUpgradeFile = config.installationUpgradeFile ?: params.installationUpgradeFile ?: 'playbooks/group_vars/all/upgrade.yml'
    String releaseTagVar = config.releaseTagVar ?: params.manifestVar ?: params.releaseTagVar
    String productVersionVar = config.productVersionVar ?: params.productVersionVar
    String productVersionLocation = config.productVersionLocation ?: params.productVersionLocation
    String productVersionIdentifier = config.productVersionIdentifier ?: params.productVersionIdentifier

    String baseBranch = config.baseBranch
    String branch = config.branch
    String product = config.product

    String latestProductRelease = config.latestProductRelease
    String latestProductVersion = config.latestProductVersion
    def latestProductReleases = config.latestProductReleases

    def updateVersionLevels = config.updateVersionLevels ?: ['major', 'minor', 'patch']
    String updateVersionType = config.updateVersionType

    String checkoutDir = "installation-${baseBranch}"
    String currentProductRelease

    stage("Fetch Base Branch ${baseBranch}") {
        println "Fetch Base Branch ${baseBranch}"
        gitCheckoutRepo(installationGitUrl, baseBranch, githubSSHCredentialsID, checkoutDir)
    }

    dir(checkoutDir) {
        sshagent([githubSSHCredentialsID]) {
            sh 'git config --global user.name "Automatron"'
            sh 'git config --global user.email "github.eng@feedhenry.com"'

            stage("Fetch current ${product} version (${branch})") {
                def installationManifest = readYaml file: installationManifestFile
                if (releaseTagVar) {
                    currentProductRelease = installationManifest[releaseTagVar]
                } else {
                    currentProductRelease = installationManifest[productVersionVar]
                }
                if (!currentProductRelease) {
                    error "[ERROR] Unable to retrieve current product release!"
                }
                println "[INFO] currentProductRelease = ${currentProductRelease}"
            }

            stage('Fetch Latest Product Release') {
                latestProductRelease = findLatestVersionFor(product, currentProductRelease, latestProductReleases, updateVersionType, updateVersionLevels)
                if (!latestProductRelease) {
                    error "[ERROR] Unable to retrieve latest release version!"
                }
                println "[INFO] Latest Product Release = ${latestProductRelease}"
            }

            stage('Fetch Latest Product Version') {
                if (productVersionLocation && productVersionIdentifier) {
                    def templateUrl = "https://raw.githubusercontent.com/${projectOrg}/${projectRepo}/${latestProductRelease}/${productVersionLocation}"

                    if (projectOrg == "integr8ly") {
                        latestProductVersion = sh(returnStdout: true, script: "curl -i '${templateUrl}' | grep '${productVersionIdentifier}' | head -n 1 | awk '{print \$3}'")
                        latestProductVersion = latestProductVersion.replaceAll("[\"\']v*", "")
                    }

                    // Current tags/releases does not have the right product version in the webapp handler.
                    // This can be removed once this property has been updated with the correct information in the next release
                    // https://github.com/integr8ly/tutorial-web-app-operator/blob/v0.0.4/pkg/handlers/webhandler.go#L23
                    if (product == "webapp") {
                        latestProductVersion = sh(returnStdout: true, script: "curl -i '${templateUrl}' | grep '${productVersionIdentifier}' | awk -F ':' '{print \$3}'")
                        latestProductVersion = latestProductVersion.replaceAll("v", "")
                    }

                    latestProductVersion = latestProductVersion.trim()

                    if (!latestProductVersion) {
                        error "[ERROR] Product version for ${product} was not found. Product Version: ${latestProductVersion}"
                    }
                } else {
                    latestProductVersion = latestProductRelease
                }
                println "[INFO] Latest Product Version ${latestProductVersion}"
            }

            currentBuild.description = (currentBuild.description ?: "") + "\nbranch: ${branch}\n latest: ${latestProductRelease}\n current: ${currentProductRelease}\n type: ${updateVersionType}"
            println("processInstallationBranch - baseBranch:${baseBranch}, branch:${branch}, product:${product}, latestProductRelease:${latestProductRelease}, currentProductRelease:${currentProductRelease}, latestProductVersion:${latestProductVersion}, updateVersionType:${updateVersionType}")

            String productUpgradeCommitMsg = "Add ${product} to update products list"

            stage("Ensure Branch (${branch})") {
                println "[INFO] Ensure Branch (${branch})"
                gitCreateAndCheckoutBranch(branch, true, false)
                gitDeleteCommitWithMessage(productUpgradeCommitMsg, baseBranch)
                gitRebaseBranch(baseBranch, branch, false)
            }

            stage("Update Manifest File (${branch})") {
                println "[INFO] Product Version Update (${branch})"
                if (latestProductRelease != currentProductRelease) {
                    gitCommitWhenChanges("Updated ${product} product version to ${latestProductRelease}") { msgs ->
                        def manifestFileTxt = readFile(installationManifestFile)
                        manifestFileTxt = updateManifestVariable(manifestFileTxt, releaseTagVar, latestProductRelease)
                        manifestFileTxt = updateManifestVariable(manifestFileTxt, productVersionVar, latestProductVersion)
                        writeFile file: installationManifestFile, text: manifestFileTxt
                    }
                }
            }

            stage("Update Upgrade File (${branch})") {
                println "[INFO] Product Upgrade Update (${branch})"
                if (latestProductRelease != currentProductRelease) {
                    def exists = fileExists installationUpgradeFile
                    if (exists) {
                        gitCommitWhenChanges(productUpgradeCommitMsg) { msgs ->
                            def upgradeVariables = readYaml file: installationUpgradeFile
                            def upgradeProductRoles = upgradeVariables['upgrade_product_roles']
                            upgradeProductRoles.remove(product)
                            upgradeProductRoles << lookupProductAnsibleRole(product)
                            upgradeProductRoles = upgradeProductRoles.unique()
                            upgradeVariables['upgrade_product_roles'] = upgradeProductRoles
                            sh "rm ${installationUpgradeFile}"
                            writeYaml file: installationUpgradeFile, data: upgradeVariables
                        }
                    } else {
                        println "No ${installationUpgradeFile} to load!!"
                    }
                }
            }

            stage("Push Branch (${branch})") {
                println "[INFO] Push Branch (${branch})"
                int commmitCount = sh(returnStdout: true, script: "git log origin/${baseBranch}..${branch} --pretty=o | wc -l").trim() as int
                def existingBranchCommitHash = sh(returnStdout: true, script: "git ls-remote origin refs/heads/${branch} | cut -f 1").trim()

                boolean doPush = false

                if (branch != 'master') {
                    if (existingBranchCommitHash) {
                        doPush = true
                    } else {
                        doPush = commmitCount > 0
                    }
                }
                println "doPush = ${doPush}"

                if (doPush) {
                    gitPushBranch(branch, true)
                } else {
                    println("[INFO] Branch push criteria not met for ${branch}")
                }
            }
        }
    }

}

def getReleases(String gitOrg, String gitRepoName, String ghCredentialsID, String releaseFetchMethod, String gaReleaseTagRef) {
    def ghUtils = new GitHubUtils()
    if (releaseFetchMethod == "tag") {
        def ghTags = ghUtils.ghGetRepoTags(gitOrg, gitRepoName, ghCredentialsID, gaReleaseTagRef)
        def releaseTags = ghTags.collect() {
            it.ref.minus("refs/tags/")
        }
        return releaseTags
    } else {
        return [ghUtils.ghGetLatestReleaseByRelease(gitOrg, gitRepoName, ghCredentialsID)]
    }
}

def latestReleases

node() {

    cleanWs()

    stage('Fetch Latest Product Releases') {
        latestReleases = getReleases(projectOrg, projectRepo, githubCredentialsID, releaseFetchMethod, gaReleaseTagRef)
        println "[INFO] Latest Product Release = ${latestReleases}"
    }

    //Only apply product patch updates to master if we have opted to not update the latest release for this product
    List masterVersionLevels = updateLatestRHMIRelease ? ['major', 'minor'] : ['major', 'minor', 'patch']
    List latestReleaseVersionLevels = ['patch']

    processInstallationBranch {
        branch = gaBranch
        baseBranch = installationGitRef
        product = productName
        latestProductReleases = latestReleases
        updateVersionLevels = masterVersionLevels
        updateVersionType = 'ga'
    }

    if (updateLatestRHMIRelease) {

        stage('Fetch Latest RHMI Release') {
            gitCheckoutRepo(installationGitUrl, 'master', githubSSHCredentialsID, 'installation')
            dir('installation') {
                latestRHMIRelease = sh(returnStdout: true, script: "git describe --tags `git rev-list --tags --max-count=1`")
                latestRHMIBranch = getRHMIReleaseBranch(latestRHMIRelease)
                latestReleaseGABranch = "${gaBranch}_${latestRHMIBranch}"
            }
            println "[INFO] Latest RHMI Release latestRHMIRelease:${latestRHMIRelease}, latestRHMIBranch:${latestRHMIBranch}, latestReleaseGABranch:${latestReleaseGABranch}"
        }

        processInstallationBranch {
            branch = latestReleaseGABranch
            baseBranch = latestRHMIBranch
            product = productName
            latestProductReleases = latestReleases
            updateVersionLevels = latestReleaseVersionLevels
            updateVersionType = 'ga'
        }
    }
}
